/*
===========================================================
Arquivo: operadores.js
Assunto: Todos os operadores em JavaScript
===========================================================
*/

// -------------------------------
// 1Ô∏è‚É£ OPERADORES ARITM√âTICOS
// -------------------------------

let a = 10;
let b = 3;

console.log("Soma:", a + b);          // 13
console.log("Subtra√ß√£o:", a - b);     // 7
console.log("Multiplica√ß√£o:", a * b); // 30
console.log("Divis√£o:", a / b);       // 3.333...
console.log("M√≥dulo:", a % b);        // 1 (resto da divis√£o)
console.log("Exponencia√ß√£o:", a ** b);// 1000

// -------------------------------
// 2Ô∏è‚É£ OPERADORES DE ATRIBUI√á√ÉO
// -------------------------------

let x = 5;
x += 2;  //x = x + 2; x = 7
x -= 1;  //x =  x - 1; x = 6
x *= 3;  //x = x * 3; x = 18
x /= 2;  //x = x / 2; x = 9
x %= 4;  //x = x % 4; x = 1
x **= 3; //x = x ** 3; x = 1 (1 elevado a 3)

console.log("Resultado final de x:", x);

// -------------------------------
// 3Ô∏è‚É£ OPERADORES DE COMPARA√á√ÉO
// -------------------------------

console.log(5 == "5");   // true  ‚Üí compara s√≥ o valor
console.log(5 === "5");  // false ‚Üí compara valor e tipo
console.log(5 != "5");   // false
console.log(5 !== "5");  // true
console.log(5 > 3);      // true
console.log(5 < 3);      // false
console.log(5 >= 5);     // true
console.log(5 <= 4);     // false

// -------------------------------
// 4Ô∏è‚É£ OPERADORES L√ìGICOS
// -------------------------------

/*
Em JavaScript, true/false podem ser influenciados por valores
"truthy" (verdadeiros) ou "falsy" (falsos).

Falsy: 0, "", null, undefined, NaN, false
Truthy: qualquer outro valor
*/

// --- AND (&&) ---
var number = 10
var number1 = 2
var number2 = 3
if(number < 2 && number1 >= 2 && number2 > 2)
{
 console.log("Todos s√£o verdadeiros");

} // false

console.log(number < 2 && number1 >= 2);   // true
console.log(number > 2 && number1 >= 2);  // false
//console.log(false && "Ol√°"); // false (curto-circuito, para na esquerda)
//console.log("Texto" && 123); // 123 (retorna o √∫ltimo truthy)

let usuario = "Ana";
let senha = "1234";
console.log(usuario && senha ? "Login v√°lido" : "Login inv√°lido");
// "Login v√°lido" (ambos s√£o truthy)

// --- OR (||) ---



var number = 10
var number1 = 1
var number2 = true
console.log(typeof number2)

if(number < 2 || number1 >= 2 || number2 > 2)
{
 console.log("No minimo 1 e verdadeiro"); 

} // false
console.log(true || false);   // true
console.log(false || false);  // false
console.log(false || "Teste");// "Teste" (pega o primeiro truthy)
console.log("" || "Padr√£o");  // "Padr√£o" (valor vazio √© falsy)

// Muito usado para valores padr√£o:
let nome = "" || "Convidado";
console.log(nome); // "Convidado"

// --- NOT (!) ---
var n1 = 5;
var n2 = 3;

var soma = n1 + n2;
console.log(soma);     // 8

// Aplicando nega√ß√£o l√≥gica
console.log(!soma);    // false, porque 8 √© "truthy"
console.log(!!soma);   // true, for√ßando a convers√£o para boolean

//soma = 8 ‚Üí qualquer n√∫mero diferente de 0 √© considerado truthy.

//!soma ‚Üí !(truthy) ‚Üí false.

//!!soma ‚Üí for√ßa a convers√£o para boolean, resultando em true.

//üëâ Se a soma fosse 0, a√≠ sim !0 seria true:
console.log(!5);  // true
console.log(!"Texto");// false (string √© truthy, ent√£o nega ‚Üí false)
console.log(!0);      // true (0 √© falsy)

// Dupla nega√ß√£o (!!) ‚Üí converte para boolean
console.log(!!"texto"); // true
console.log(!!0);       // false

/*
‚úÖ Resumo pr√°tico:
- && ‚Üí s√≥ d√° true se todos forem verdadeiros. 
      Retorna o primeiro falsy encontrado ou o √∫ltimo truthy.
- || ‚Üí s√≥ d√° false se todos forem falsos. 
      Retorna o primeiro truthy encontrado.
- !  ‚Üí inverte o valor l√≥gico.
- !! ‚Üí garante convers√£o para booleano.
*/

// -------------------------------
// 5Ô∏è‚É£ OPERADOR TERN√ÅRIO
// -------------------------------

let idade = 18;
let status = (idade >= 18) ? "Maior de idade" : "Menor de idade";
console.log(status); // "Maior de idade"

// -------------------------------
// 6Ô∏è‚É£ OPERADORES DE INCREMENTO/DECREMENTO
// -------------------------------

let y = 5;
console.log("P√≥s-incremento:", y++); // 5 (depois incrementa ‚Üí y=6)
console.log("Agora y =", y);         // 6
console.log("Pr√©-incremento:", ++y); // 7 (incrementa antes)

console.log("P√≥s-decremento:", y = y - 1); // 7 (depois decrementa ‚Üí y=6)
console.log("Agora y =", y);         // 6
console.log("Pr√©-decremento:", --y); // 5

// -------------------------------
// 7Ô∏è‚É£ OPERADORES DE TIPO
// -------------------------------

console.log(typeof 123);         // "number"
console.log(typeof "abc1234");       // "string"
console.log(typeof true);        // "boolean"
console.log(typeof {});          // "object"
console.log(typeof []);          // "object" (array tamb√©m √© objeto)
console.log(typeof undefined);   // "undefined"
console.log(typeof null);        // "object" (bug hist√≥rico)
console.log(typeof function(){});// "function"

// instanceof ‚Äì verifica inst√¢ncia de classe
let data = new Date();
console.log(data instanceof Date); // true
console.log(data instanceof Array);// false

// -------------------------------
// 8Ô∏è‚É£ OPERADORES ESPECIAIS
// -------------------------------

// delete ‚Äì remove propriedade de objeto
let pessoa = { nome: "Ana", idade: 25 };
delete pessoa.idade;
console.log(pessoa); // { nome: "Ana" }

// in ‚Äì verifica se existe uma propriedade
console.log("nome" in pessoa);  // true
console.log("idade" in pessoa); // false

// -------------------------------
// 9Ô∏è‚É£ OPERADORES BITWISE (n√≠vel de bits)
// -------------------------------

console.log(5 & 3);  // 1  (0101 & 0011 = 0001)
console.log(5 | 3);  // 7  (0101 | 0011 = 0111)
console.log(5 ^ 3);  // 6  (0101 ^ 0011 = 0110)
console.log(~5);     // -6 (inverte os bits)
console.log(5 << 1); // 10 (desloca bits p/ esquerda)
console.log(5 >> 1); // 2  (desloca bits p/ direita)

// -------------------------------
// üîü OPERADOR DE AGRUPAMENTO
// -------------------------------

console.log((2 + 3) * 4); // 20 ‚Üí par√™nteses t√™m prioridade

// -------------------------------
// üî• RESUMO FINAL
// -------------------------------

/*
üìå Categorias de operadores no JS:

- Aritm√©ticos: + - * / % **
- Atribui√ß√£o: = += -= *= /= %= **=
- Compara√ß√£o: == === != !== > < >= <=
- L√≥gicos: && || ! !!
- Tern√°rio: condicao ? valor1 : valor2
- Incremento/Decremento: ++ --
- Tipo: typeof, instanceof
- Especiais: delete, in
- Bitwise: & | ^ ~ << >>
- Agrupamento: ( )
*/
