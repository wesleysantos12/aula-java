/*
===========================================================
Arquivo: funcoes.js
Assunto: Fun√ß√µes em JavaScript
===========================================================

üìå O que √© uma fun√ß√£o?
Uma fun√ß√£o √© um bloco de c√≥digo reutiliz√°vel que executa uma tarefa
ou calcula um valor. Pode receber entradas (par√¢metros) e retornar sa√≠das.
*/

// -------------------------------
// 1Ô∏è‚É£ Fun√ß√£o declarada (Function Declaration)
// -------------------------------

function saudacao(nome) {
  return `Ol√°, ${nome}!`;
}

console.log(saudacao("Rodrigo")); // "Ol√°, Rodrigo!"

// Hoisting: fun√ß√µes declaradas s√£o i√ßadas completamente
console.log(testeHoisting()); // "Fun√ß√£o declarada funciona mesmo antes"
function testeHoisting() {
  return "Fun√ß√£o declarada funciona mesmo antes";
}

// -------------------------------
// 2Ô∏è‚É£ Fun√ß√£o an√¥nima atribu√≠da a vari√°vel (Function Expression)
// -------------------------------

const soma = function (a, b) {
  return a + b;
};

console.log(soma(5, 3)); // 8

// Fun√ß√µes em express√£o N√ÉO sofrem hoisting da mesma forma
// console.log(subtrair(5, 3)); // ‚ùå Erro
const subtrair = function (a, b) {
  return a - b;
};

// -------------------------------
// 3Ô∏è‚É£ Fun√ß√£o de seta (Arrow Function)
// -------------------------------

const multiplicar = (a, b) => a * b;
console.log(multiplicar(4, 2)); // 8

// Quando tem apenas um par√¢metro, par√™nteses s√£o opcionais
const dobrar = n => n * 2;
console.log(dobrar(5)); // 10

// Quando h√° v√°rias linhas, precisa de {}
const saudacaoArrow = (nome) => {
  console.log("Preparando mensagem...");
  return `Ol√°, ${nome}!`;
};
console.log(saudacaoArrow("Maria"));

// Arrow Functions N√ÉO t√™m seu pr√≥prio "this"
const pessoa = {
  nome: "Ana",
  falar: function () {
    console.log(`Meu nome √© ${this.nome}`);
  },
  falarArrow: () => {
    console.log(`Meu nome √© ${this.nome}`); // ‚ùå "this" aqui n√£o √© do objeto
  },
};
pessoa.falar(); // "Meu nome √© Ana"
pessoa.falarArrow(); // "Meu nome √© undefined"

// -------------------------------
// 4Ô∏è‚É£ Par√¢metros padr√£o
// -------------------------------

function saudacaoPadrao(nome = "Visitante") {
  return `Ol√°, ${nome}!`;
}
console.log(saudacaoPadrao()); // "Ol√°, Visitante"

// -------------------------------
// 5Ô∏è‚É£ Fun√ß√£o com n√∫mero vari√°vel de argumentos
// -------------------------------

function somarTudo(...numeros) {
  return numeros.reduce((total, n) => total + n, 0);
}
console.log(somarTudo(1, 2, 3, 4)); // 10

// -------------------------------
// 6Ô∏è‚É£ Fun√ß√µes dentro de fun√ß√µes (fun√ß√µes aninhadas)
// -------------------------------

function operacoes(a, b) {
  function somaInterna() {
    return a + b;
  }
  function multiplicacaoInterna() {
    return a * b;
  }
  return { somaInterna, multiplicacaoInterna };
}

const { somaInterna, multiplicacaoInterna } = operacoes(3, 4);
console.log(somaInterna()); // 7
console.log(multiplicacaoInterna()); // 12

// -------------------------------
// 7Ô∏è‚É£ Fun√ß√µes como valores (First-Class Functions)
// -------------------------------

function executarFuncao(fn, valor) {
  return fn(valor);
}

console.log(executarFuncao(dobrar, 8)); // 16

// -------------------------------
// 8Ô∏è‚É£ Fun√ß√£o autoexecut√°vel (IIFE - Immediately Invoked Function Expression)
// -------------------------------

(function () {
  console.log("Fun√ß√£o executada automaticamente!");
})();

// -------------------------------
// 9Ô∏è‚É£ Resumo r√°pido
// -------------------------------

/*
- Function Declaration:
  ‚úÖ Sofre hoisting
  ‚úÖ Ideal quando quer usar antes de declarar

- Function Expression:
  ‚ùå N√£o sofre hoisting
  ‚úÖ Pode ser an√¥nima
  ‚úÖ Boa para passar como argumento

- Arrow Function:
  ‚ùå N√£o sofre hoisting
  ‚ùå N√£o tem seu pr√≥prio "this"
  ‚úÖ Sintaxe curta
  ‚úÖ Ideal para fun√ß√µes simples
*/

// -------------------------------
// üîü Boas pr√°ticas
// -------------------------------
/*
‚úÖ Use arrow functions para fun√ß√µes curtas e simples
‚úÖ Use function declaration quando precisar de hoisting
‚úÖ Prefira nomes claros para as fun√ß√µes
‚úÖ Use par√¢metros padr√£o para evitar undefined
*/
